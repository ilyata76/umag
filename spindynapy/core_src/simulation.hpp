#ifndef __SIMULATION_HPP__
#define __SIMULATION_HPP__

/**
 * Интерфейсы и классы, отвечающие за главный функционал - симуляцию,
 * управление симуляцией.
 */

#include "types/base.hpp"

namespace spindynapy {

/**
 * Базовый интерфейс управлятора симуляцией. Вход в программу.
 *
 * Через управлятор, содержащий в себе всю информацию о проводимом
 * эксперименте (богатое состояние), можно развивать систему согласно заданным настройкам,
 * а также извне, вызывая специальные для этого методы (API симулятора)
 */
class ISimulation : public StrPresentationMixin {
  public:
    ISimulation() = default;
    virtual ~ISimulation() = 0;
};

}; // namespace spindynapy

namespace spindynapy::doc {

constexpr char module_simulation[] = "Интерфейсы и классы, отвечающие за главный функционал - симуляцию.";

constexpr char ISimulation[] =
    "Базовый интерфейс управлятора симуляцией. Вход в программу.\n\n"
    "Через управлятор, содержащий в себе всю информацию о проводимом\n"
    "эксперименте (богатое состояние), можно развивать систему согласно заданным настройкам,\n"
    "а также извне, вызывая специальные для этого методы (API симулятора)\n";

}; // namespace spindynapy::doc

#endif // ! __SIMULATION_HPP__
